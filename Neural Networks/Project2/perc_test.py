import perceptron as P
import numpy as np
print_stuff = True

if print_stuff:
    print("\n\n\nPerceptron tests:")
Perc_X_train = np.array([[0, 1], [1, 0], [5, 4], [1, 1], [3, 3], [2, 4], [1, 6]])
Perc_Y_train = np.array([[1], [1], [-1], [1], [-1], [-1], [-1]])
[w, b] = P.perceptron_train(Perc_X_train, Perc_Y_train)
perc_test = P.perceptron_test(Perc_X_train, Perc_Y_train, w, b)
if print_stuff:
    print("W from sample =", w, "B from sample =", b)
    print("Test on self form sample: ", perc_test)
    print("Testing for non-linearly seperable data")
Perc_stuff_X = np.array(
    [[1, 0], [7, 4], [9, 6], [2, 1], [4, 8], [0, 3], [13, 5], [6, 8], [7, 3], [3, 6], [2, 1], [8, 3], [10, 2],
     [3, 5], [5, 1], [1, 9], [10, 3], [4, 1], [6, 6], [2, 2]])
Perc_stuff_Y = np.array(
    [[1], [1], [-1], [1], [-1], [-1], [-1], [1], [1], [-1], [1], [-1], [-1], [-1], [1], [1], [-1], [1], [-1], [-1]])
[w, b] = P.perceptron_train(Perc_stuff_X, Perc_stuff_Y)
someTest = P.perceptron_test(Perc_stuff_X, Perc_stuff_Y, w, b)
if print_stuff:
    print("Non-linearly seperable data test w=", w, "b=", b, "Accuracy on self =", someTest)
Perc_random_X = np.array([[1.84724509, 2.23182926],
                          [1.22695894, 1.6611229],
                          [2.13212121, 4.63313796],
                          [7.78081405, 4.11930532],
                          [7.28450063, 3.90368111],
                          [1.29216053, 2.76912245],
                          [7.0384763, 2.80881342],
                          [1.22081714, 3.80955021],
                          [8.07666901, 2.09712771],
                          [0.65893943, 2.37166982],
                          [7.54125451, 2.0241547],
                          [8.5879484, 2.77783039],
                          [1.54737494, 4.05156389],
                          [1.43189789, 4.49671844],
                          [6.30892537, 4.01933453],
                          [7.39950228, 3.72099032],
                          [6.53660562, 1.4109906],
                          [7.68258035, 2.54631583],
                          [0.50262759, 2.08911259],
                          [6.63896203, 2.28467554],
                          [1.14133417, 2.85997382],
                          [6.81946166, 3.53529836],
                          [2.354038, 3.42822373],
                          [0.77389273, 1.70414683],
                          [6.62244805, 2.59750483],
                          [6.42295709, 2.62766122],
                          [2.56231554, 1.91120926],
                          [0.52540949, 1.23344211],
                          [9.89413728, 2.91096062],
                          [1.88418764, 1.92256087],
                          [-0.93572769, 3.00901429],
                          [1.97483998, 3.85646324],
                          [1.75425133, 1.94039176],
                          [6.09780966, 5.7701977],
                          [7.90627044, 3.24616642],
                          [1.91373175, 3.18166162],
                          [5.41723379, 3.49426095],
                          [6.09580479, 1.52743434],
                          [6.38874508, 4.38586616],
                          [7.57947364, 3.30065953],
                          [1.08730197, 1.33915717],
                          [7.28653741, 3.26206021],
                          [6.74871137, 2.04040959],
                          [2.9978026, 4.34103123],
                          [0.28027179, 2.53779067],
                          [0.5176684, 4.75632767],
                          [7.47555427, 2.6332231],
                          [1.41415099, 2.73258538],
                          [7.98711025, 4.70477507],
                          [6.77973963, 2.0746524],
                          [2.7636471, 2.94014536],
                          [6.581461, 2.44107272],
                          [2.09008475, 2.53047637],
                          [0.96852267, 2.88436235],
                          [7.74434806, 4.34556973],
                          [0.91152271, 1.47373698],
                          [0.82091776, 2.19247599],
                          [5.8663996, 2.91753114],
                          [-0.28942972, 4.30490332],
                          [7.59891371, 3.50119071],
                          [0.81165174, 4.72366869],
                          [1.92787345, 3.28348644],
                          [6.43715461, 4.01853338],
                          [6.01407992, 2.61860608],
                          [0.12360955, 2.6498164],
                          [7.59881256, 3.74651938],
                          [7.33968869, 3.4626178],
                          [2.97986056, 2.31765972],
                          [6.43014505, 2.98488265],
                          [-0.58572393, 3.66496939],
                          [2.19772064, 2.62826675],
                          [0.18413653, 4.0961083],
                          [-0.13376815, 1.79742676],
                          [5.52350811, 2.80369524],
                          [6.55678884, 4.68299368],
                          [1.22740387, 2.75441613],
                          [0.9569693, 1.73402352],
                          [7.23915574, 4.09037343],
                          [1.92312177, 0.61347901],
                          [6.95245384, 2.28744967],
                          [7.36400794, 3.72669143],
                          [7.28000894, 3.16977157],
                          [1.92092557, 3.31530054],
                          [7.70193653, 2.23564724],
                          [-0.07505079, 2.69718711],
                          [1.83965943, 3.12095445],
                          [8.08412308, 2.63502142],
                          [1.28072133, 3.54443531],
                          [0.61857237, 0.77894383],
                          [0.644136, 2.85857908],
                          [6.42458355, 2.89669648],
                          [1.01291388, 4.38175084],
                          [5.85347739, 2.08190913],
                          [5.26351248, 1.39890443],
                          [7.93727615, 1.96422122],
                          [3.04441179, 1.04143886],
                          [7.13177232, 2.19195481],
                          [7.08852856, 4.09467252],
                          [-0.19926992, 1.9934914],
                          [6.86189731, 2.55950483]])
Perc_random_Y = np.array([[1], [1], [1], [-1], [-1], [1], [-1], [1], [-1], [1], [-1], [-1], [1], [1], [-1], [-1], [-1], [-1], [1], [-1],
     [1], [-1], [1], [1], [-1], [-1], [1], [1], [-1], [1], [1], [1], [1], [-1], [-1], [1], [-1]
        , [-1], [-1], [-1], [1], [-1], [-1], [1], [1], [1], [-1], [1], [-1], [-1], [1], [-1], [1], [1], [-1], [1],
     [1], [-1], [1], [-1], [1], [1], [-1], [-1], [1], [-1], [-1], [1], [-1], [1], [1], [1], [1], [-1]
        , [-1], [1], [1], [-1], [1], [-1], [-1], [-1], [1], [-1], [1], [1], [-1], [1], [1], [1], [-1], [1], [-1],
     [-1], [-1], [1], [-1], [-1], [1], [-1]])
[Perc_random_w, Perc_random_b] = P.perceptron_train(Perc_random_X, Perc_random_Y)
Perc_random_acc_self = P.perceptron_test(Perc_random_X, Perc_random_Y, Perc_random_w, Perc_random_b)
Perc_random_with_previous_train_acc = P.perceptron_test(Perc_X_train, Perc_Y_train, Perc_random_w, Perc_random_b)
if print_stuff:
    print("Perceptron with random linearly seperable data:\n", "Acc on self=", Perc_random_acc_self, "Acc on pervious training data=", Perc_random_with_previous_train_acc)
